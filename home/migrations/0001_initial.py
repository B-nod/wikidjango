# Generated by Django 5.0.6 on 2024-06-03 01:05

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Adds',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('filename', models.TextField()),
                ('url', models.TextField()),
                ('adcode', models.TextField()),
                ('indexing', models.IntegerField()),
                ('type', models.TextField()),
                ('position', models.TextField()),
                ('ondate', models.DateField(db_column='onDate')),
            ],
            options={
                'db_table': 'adds',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blog_title', models.TextField()),
                ('urltitle', models.CharField(max_length=250)),
                ('blog_author', models.TextField()),
                ('date_of_birth', models.DateField()),
                ('networth', models.TextField()),
                ('height', models.TextField()),
                ('married', models.TextField()),
                ('blog_description', models.TextField()),
                ('blog_published_date', models.DateTimeField(db_column='blog_published_Date')),
                ('filename', models.TextField()),
                ('categories', models.TextField()),
                ('pagetitle', models.TextField(db_column='pageTitle')),
                ('visitor', models.IntegerField()),
                ('metakeyword', models.TextField(db_column='metaKeyword')),
                ('metadescription', models.TextField(db_column='metaDescription')),
            ],
            options={
                'db_table': 'blog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('category_title', models.CharField(max_length=250)),
                ('pagetitle', models.TextField()),
                ('pagekeyword', models.TextField()),
                ('pagedescription', models.TextField()),
                ('weight', models.IntegerField()),
            ],
            options={
                'db_table': 'cities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.FloatField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('address', models.TextField()),
                ('email', models.TextField()),
                ('comment', models.TextField()),
                ('commnet_published_date', models.DateField()),
                ('article_id', models.FloatField()),
                ('main', models.IntegerField()),
                ('res_id', models.IntegerField()),
                ('publish', models.CharField(max_length=250)),
            ],
            options={
                'db_table': 'comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Galleries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groupid', models.IntegerField(db_column='groupId')),
                ('caption', models.TextField()),
                ('ext', models.TextField()),
                ('ondate', models.DateField(db_column='onDate')),
                ('pagetitle', models.CharField(db_column='pageTitle', max_length=250)),
                ('pagekeyword', models.CharField(db_column='pageKeyword', max_length=250)),
                ('imagelink', models.CharField(db_column='imageLink', max_length=100)),
                ('imageposition', models.TextField(db_column='imagePosition')),
            ],
            options={
                'db_table': 'galleries',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('urlname', models.CharField(max_length=250)),
                ('days', models.CharField(max_length=20)),
                ('grading', models.CharField(max_length=100)),
                ('altitudename', models.CharField(db_column='altitudeName', max_length=100)),
                ('altitudeheight', models.IntegerField(db_column='altitudeHeight', db_comment='height in meters')),
                ('tripdeparturename', models.CharField(db_column='tripDepartureName', max_length=100)),
                ('costamount', models.IntegerField(db_column='costAmount', db_comment='amount in USD')),
                ('type', models.CharField(max_length=200)),
                ('parentid', models.IntegerField(db_column='parentId')),
                ('shortcontents', models.TextField()),
                ('contents', models.TextField()),
                ('overview', models.TextField(blank=True, null=True)),
                ('videourl', models.TextField(db_column='videoUrl')),
                ('destination_show', models.CharField(max_length=250)),
                ('triphightlight', models.TextField()),
                ('faq_details', models.TextField()),
                ('itinerary', models.TextField(blank=True, null=True)),
                ('contentlink', models.TextField(blank=True, db_column='contentLink', null=True)),
                ('image_title', models.TextField()),
                ('image_alt', models.TextField()),
                ('tripseasons', models.TextField(blank=True, db_column='tripSeasons', null=True)),
                ('tripcode', models.TextField(blank=True, db_column='tripCode', null=True)),
                ('triprating', models.TextField(blank=True, db_column='tripRating', null=True)),
                ('mountain', models.TextField(blank=True, null=True)),
                ('destination', models.TextField(blank=True, null=True)),
                ('routemap', models.TextField()),
                ('contents_spring', models.TextField(blank=True, null=True)),
                ('linktype', models.CharField(db_column='linkType', max_length=255)),
                ('weight', models.IntegerField()),
                ('act', models.IntegerField()),
                ('popular', models.CharField(max_length=250)),
                ('special', models.CharField(max_length=250)),
                ('ondate', models.DateField(db_column='onDate')),
                ('ext', models.TextField()),
                ('extt', models.CharField(max_length=10)),
                ('hide', models.CharField(max_length=3)),
                ('pagetitle', models.CharField(db_column='pageTitle', max_length=250)),
                ('pagekeyword', models.CharField(db_column='pageKeyword', max_length=250)),
                ('metadescription', models.TextField(db_column='metaDescription')),
                ('visits', models.IntegerField()),
                ('enquiry_button_status', models.IntegerField()),
                ('trip_code', models.CharField(max_length=250)),
                ('special_trekking_packages', models.CharField(max_length=250)),
                ('special_tour_packages', models.CharField(max_length=250)),
                ('special_climbing_packages', models.CharField(max_length=250)),
                ('featured_trip', models.CharField(max_length=250)),
                ('best_selling_trip', models.CharField(max_length=250)),
            ],
            options={
                'db_table': 'groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Linkexchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.TextField(blank=True, null=True)),
                ('email', models.TextField(blank=True, null=True)),
                ('url', models.TextField(blank=True, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('fileimage', models.TextField(blank=True, null=True)),
                ('status', models.IntegerField()),
                ('ondate', models.DateTimeField(db_column='onDate')),
            ],
            options={
                'db_table': 'linkexchange',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metahome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pagetitle', models.TextField(blank=True, db_column='pageTitle', null=True)),
                ('pagekeyword', models.TextField(blank=True, db_column='pageKeyword', null=True)),
                ('metadescription', models.TextField(blank=True, db_column='metaDescription', null=True)),
            ],
            options={
                'db_table': 'metahome',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Testimonials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_id', models.IntegerField()),
                ('name', models.CharField(db_column='Name', max_length=250)),
                ('address', models.CharField(max_length=250)),
                ('comments', models.TextField(db_column='Comments')),
                ('filename', models.CharField(max_length=250)),
                ('status', models.IntegerField()),
                ('ndate', models.DateField(db_column='nDate')),
            ],
            options={
                'db_table': 'testimonials',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Usergroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('power', models.IntegerField()),
            ],
            options={
                'db_table': 'usergroups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50)),
                ('password', models.CharField(max_length=50)),
                ('lastlogin', models.DateTimeField(db_column='lastLogin')),
                ('logintimes', models.PositiveIntegerField(db_column='loginTimes')),
                ('status', models.CharField(max_length=1)),
                ('usergroupid', models.PositiveIntegerField(db_column='userGroupId')),
                ('email', models.TextField()),
            ],
            options={
                'db_table': 'users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Videos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groupid', models.PositiveIntegerField(db_column='groupId')),
                ('title', models.TextField()),
                ('url', models.CharField(max_length=100)),
                ('ondate', models.DateField(db_column='onDate')),
            ],
            options={
                'db_table': 'videos',
                'managed': False,
            },
        ),
    ]
